stages:
  - build
  - release
  - test
  - linting

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "gitlab-ci.yml"

test:
  stage: test
  script:
    - cp /home/gitlab-runner/configs/.env ./
    - docker-compose -f test.docker-compose.yml build
    - docker-compose -f test.docker-compose.yml up -d
    - docker-compose -f test.docker-compose.yml run test_app pytest -v --junitxml="result.xml"
  artifacts:
    when: always
    paths:
      - result.xml
    reports:
      junit: result.xml


linting:
  stage: linting
  script:
    - cp /home/gitlab-runner/configs/.env ./
    - docker-compose -f test.docker-compose.yml build
    - docker-compose -f test.docker-compose.yml up -d
    - docker-compose -f dev.docker-compose.yml run test_app flake8
  only:
    - gitlab-ci.yml


build:
  stage: build
  script:
    - cp /home/gitlab-runner/configs/.env ./
    - docker-compose build

release:
  stage: release
  script:
    - cp /home/gitlab-runner/configs/.env ./
    - docker-compose -f docker-compose.yml -f prod.certbot.yml up -d
    - docker-compose exec -T app python manage.py collectstatic --no-input

  only:
    - gitlab-ci.yml

